/*
  Created by: Fei Song
  File Name: tiny.cup
*/


/* ----------------------Preliminary Declarations Section--------------------*/

import absyn.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE, TYPE;
terminal ASSIGN, RETURN, EQ, LT, GT, LEQ, GTE, NEQ, EEQ, PLUS, MINUS, AND, OR, MULOP;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMI, COMMA, NOT;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal Exp program1;
non terminal ExpList program, stmt_seq;
non terminal ExpList args, arg_list;
non terminal Exp exp_stmt, stmt, if_stmt, repeat_stmt, assign_stmt, call;
non terminal Exp exp, obool_exp, abool_exp, ubool_exp, simple_exp, add_exp, term, signed_factor, factor, compound_stmt;
non terminal Var var;
non terminal VarDec var_dec;
non terminal DecList local_dec;
/* ----------------------------Grammar Section-------------------- */

start with program;

program1     ::= exp:e
                 {: RESULT = e; :}
               ;

program	     ::= stmt_seq:s
                 {: RESULT = s; :}
               ;
compound_stmt ::= LBRACE local_dec:l var_dec:v1 RBRACE
                 {: RESULT = new CompoundExp(lleft, lright, l, v1); :}
                 ;

local_dec    ::= local_dec:l var_dec:v1
                 {: DecList d = l;
                    while( l.tail != null )
                      l = l.tail;
                    l.tail = new DecList(v1, null);
                    RESULT = l;
                 :}
               | /*empty*/
                 {: RETURN = new DecList(NilExp, null); :}
                 ;
stmt_seq     ::= stmt_seq:s1 stmt:s2
                 {: ExpList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(s2, null);
                    RESULT = s1;
                 :}
               | stmt:s
                 {: RESULT = new ExpList(s, null); :}
               | error SEMI stmt:s
                 {: parser.report_error("invalid", null);
                    RESULT = new ExpList(s, null);
                 :}
               ;

stmt         ::= exp_stmt:e
                 {: RESULT = e; :}
               | assign_stmt:a
                 {: RESULT = a; :}
               | compound_stmt:c
                 {: RESULT = c; :} //todo: fix
               ;

exp_stmt     ::= exp:e SEMI
                 {: RESULT = e; :}
               | SEMI
                 {: RESULT = new NilExp(0, 0); :}
               ;

assign_stmt  ::= ID:i EQ exp:e
                 {: RESULT = e; :}
               ; //Todo fix this

var_dec  ::= TYPE:t ID:i
                 {:
                 int ty = 0;
                 if (t.toString().equals("void")){
                    ty = NameTy.VOID;
                 }
                 if (t.toString().equals("int")){
                    ty = NameTy.INT;
                 }
                 if (t.toString().equals("bool")){
                    ty = NameTy.BOOL;
                 }
                 RESULT = new SimpleDec(tleft, tright, new NameTy(tleft, tright, ty), i); :}
             | TYPE:t ID:i LBRACK NUM:n RBRACK
                 {:
                 int ty = 0;
                 if (t.toString() == "void"){
                    ty = NameTy.VOID;
                 }
                 if (t.toString() == "int"){
                    ty = NameTy.INT;
                 }
                 if (t.toString() == "bool"){
                    ty = NameTy.BOOL;
                 }
                 RESULT = new ArrayDec(tleft, tright, new NameTy(tleft, tright, ty), i, Integer.parseInt(n)); :}
               ;

exp           ::= obool_exp: e
                {: RESULT = e; :}
              ;

obool_exp      ::= obool_exp:o1 OR abool_exp:a2
                 {: RESULT = new BoolExp(o1left, o1right, o1, BoolExp.OR, a2); :}
               |   abool_exp:a
                 {: RESULT = a; :}
               ;

abool_exp      ::= abool_exp:a AND ubool_exp:u
                 {: RESULT = new BoolExp(aleft, aright, a, BoolExp.AND, u); :}
               |   ubool_exp:u
                 {: RESULT = u; :}
               ;

ubool_exp      ::= NOT ubool_exp:u
                 {: RESULT = new OpExp(uleft, uright, new NilExp(0,0), OpExp.NOT, u); :}
               | simple_exp:s
                 {: RESULT = s; :}
               ;

simple_exp          ::= add_exp:s1 LT add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); :}
               | add_exp:s1 GT add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); :}
               | add_exp:s1 NEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2); :}
               | add_exp:s1 GTE add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2); :}
               | add_exp:s1 LEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LEQ, s2); :}
               | add_exp:s1 EEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.EEQ, s2); :}
               | add_exp:s1 EQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.EQ, s2); :}
               | add_exp:s
                 {: RESULT = s; :}
               ;
add_exp   ::= add_exp:s PLUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.PLUS, t); :}
               | add_exp:s MINUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.MINUS, t); :}
               | term:t
                 {: RESULT = t; :}
               ;

term         ::= term:t MULOP:m signed_factor:f
                 {: RESULT = new OpExp(tleft, tright, t, m, f); :}
               | signed_factor:f
                 {: RESULT = f; :}
               ;

signed_factor ::= MINUS:m signed_factor:f
                  {: RESULT = new OpExp(mleft, mright, new NilExp(0,0), OpExp.UMINUS, f); :}
               |  factor:f
                  {: RESULT = f; :}
               ;

factor       ::= LPAREN exp:e RPAREN
                 {: RESULT = e; :}
               | NUM:n
                 {: RESULT = new IntExp(nleft, nright, n); :}
               | var:v
                 {: RESULT = new VarExp(vleft, vright, v); :}
               | TRUTH:t
                 {: RESULT = new TruthExp(tleft, tright, t); :}
               | call:c
                 {: RESULT = c; :}
               ;

var          ::= ID:i
                {: RESULT = new SimpleVar(ileft, iright, i); :}
               | ID:i1 LBRACK exp:e2 RBRACK
                {: RESULT = new IndexVar(i1left, i1right, i1, e2); :}
             ;

call         ::= ID:i1 LPAREN args:a2 RPAREN
                {: RESULT = new CallExp(i1left, i1right, i1, a2); :}
                ;

args         ::= arg_list:a
                {: RESULT = a; :}
                ;

arg_list     ::= /*empty*/
                 {: RESULT = new ExpList(new NilExp(0, 0), null); :}
               | arg_list:a1 COMMA exp:e2
                 {: ExpList t = a1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(e2, null);
                    RESULT = a1;
                 :}
               | exp:e
                 {: RESULT = new ExpList(e, null); :}
               | error COMMA exp:e
                 {: parser.report_error("invalid", null);
                    RESULT = new ExpList(e, null);
                 :}
               ;