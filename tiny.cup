/*
  Created by: Fei Song
  File Name: tiny.cup
*/


/* ----------------------Preliminary Declarations Section--------------------*/

import absyn.*;import java.lang.Object;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof Symbol) {
            /* Declare a Symbol object 's' with the
               information in the object info that is being typecasted
               as a Symbol object. */
            Symbol s = ((Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.pos >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                //m.append(" in line "+(s.right+1));// Todo add line number
                /* Check if the column number in the input is greater
                   or equal to zero. */
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.pos+1));
                    m.append(s.sym);
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE, INT, BOOL, VOID;
terminal ASSIGN, RETURN, EQ, LT, GT, LEQ, GTE, NEQ, EEQ, PLUS, MINUS, AND, OR;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMI, COMMA, NOT;
terminal String ID, NUM, TIMES, OVER, TYPE, TRUTH;
terminal ERROR;
terminal NameTy type;

non terminal Exp program1;
non terminal DecList program;
non terminal ExpList stmt_seq;
non terminal ExpList args, arg_list;
non terminal Exp exp_stmt, stmt, if_stmt, write_stmt, assign_stmt, call;
non terminal Exp exp, obool_exp, abool_exp, ubool_exp, simple_exp, add_exp, term, signed_factor, factor, compound_stmt;
non terminal VarExp var;
non terminal Dec dec;
non terminal VarDec var_dec;
non terminal VarDecList local_dec;
non terminal DecList dec_list;
non terminal FunctionDec fun_dec;
/* ----------------------------Grammar Section-------------------- */

start with dec_list;


program1     ::= exp:e
                 {: RESULT = e; :}
               ;

program	     ::= dec_list:s
                 {: RESULT = s; :}
               ;

dec_list    ::= dec_list:d1 dec:d2
                 {:
                    DecList l = d1;
                    while( l.tail != null )
                      l = l.tail;
                    l.tail = new DecList(d2, null);
                    RESULT = d1;
                 :}
               | dec:d
                 {: RESULT = new DecList(d, null); :}
               ;


dec         ::= var_dec:v
              {: RESULT = v; :}
              | fun_dec:f1
              {: RESULT = f1; :}
            ;

fun_dec       ::= INT:i1 ID:i2 LPAREN arg_list:a RPAREN compound_stmt:c
                {: RESULT = new FunctionDec(i1left, new NameTy(i1left, NameTy.INT), i2, null, c); :}
               ;

compound_stmt ::= LBRACE local_dec:l stmt_seq:s RBRACE
                  {: RESULT = new CompoundExp(lleft, l, s); :}
                ;

local_dec    ::= /*empty*/
                 {: RESULT = new VarDecList(null, null); :}
                 | local_dec:d var_dec:v1
                 {: VarDecList l = d;
                    if (l.head == null){
                      l.head = v1;
                    } else {
                        while( l.tail != null )
                          l = l.tail;
                        l.tail = new VarDecList(v1, null);
                    }
                    RESULT = d;
                 :}
                 ;

stmt_seq     ::= stmt_seq:s1 stmt:s2
                 {: ExpList t = s1;
                    if (t.head == null) {
                      t.head = s2;
                    } else {
                        while( t.tail != null )
                          t = t.tail;
                        t.tail = new ExpList(s2, null);
                    }
                    RESULT = s1;
                 :}
                 | /*empty*/
                 {: RESULT = new ExpList(null, null); :}
               ;
stmt         ::=  exp_stmt:e
                 {: RESULT = e; :}
               | compound_stmt:c
                 {: RESULT = c; :} //todo: fix
               | if_stmt:i
                 {: RESULT = i; :}
               | assign_stmt:a
                 {: RESULT = a; :}
               | write_stmt:w
                 {: RESULT = w; :}
               ;
exp_stmt     ::= exp:e SEMI
                 {: RESULT = e; :}
               | SEMI
                 {: RESULT = new NilExp(0); :}
               ;

var_dec  ::= BOOL:t ID:i SEMI
               {: RESULT = new SimpleDec(tleft, new NameTy(tleft, NameTy.BOOL), i); :}
             | INT:t ID:i SEMI
               {: RESULT = new SimpleDec(tleft, new NameTy(tleft, NameTy.INT), i); :}
             | VOID:t ID:i SEMI
               {: RESULT = new SimpleDec(tleft, new NameTy(tleft, NameTy.VOID), i); :}
             | BOOL:t ID:i LBRACK NUM:n RBRACK SEMI
               {: RESULT = new ArrayDec(tleft, new NameTy(tleft, NameTy.BOOL), i, Integer.parseInt(n)); :}
             | INT:t ID:i LBRACK NUM:n RBRACK SEMI
               {: RESULT = new ArrayDec(tleft, new NameTy(tleft, NameTy.INT), i, Integer.parseInt(n)); :}
             | VOID:t ID:i LBRACK NUM:n RBRACK SEMI
               {: RESULT = new ArrayDec(tleft, new NameTy(tleft, NameTy.VOID), i, Integer.parseInt(n)); :}
             ;

exp           ::= var:v1 EQ exp:e2
                {: RESULT =  new AssignExp(v1left, v1, e2); :}
               | obool_exp: e
                {: RESULT = e; :}
              ;

obool_exp      ::= obool_exp:o1 OR abool_exp:a2
                 {: RESULT = new OpExp(o1left, o1, OpExp.OR, a2); :}
               |   abool_exp:a
                 {: RESULT = a; :}
               ;

abool_exp      ::= abool_exp:a AND ubool_exp:u
                 {: RESULT = new OpExp(aleft, a, OpExp.AND, u); :}
               |   ubool_exp:u
                 {: RESULT = u; :}
               ;

ubool_exp      ::= NOT ubool_exp:u
                 {: RESULT = new OpExp(uleft, new NilExp(0), OpExp.NOT, u); :}
               | simple_exp:s
                 {: RESULT = s; :}
               ;

simple_exp          ::= add_exp:s1 LT add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.LT, s2); :}
               | add_exp:s1 GT add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.GT, s2); :}
               | add_exp:s1 NEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.NEQ, s2); :}
               | add_exp:s1 GTE add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.GTE, s2); :}
               | add_exp:s1 LEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.LEQ, s2); :}
               | add_exp:s1 EEQ add_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.EEQ, s2); :}
               | add_exp:s
                 {: RESULT = s; :}
               ;
add_exp   ::= add_exp:s PLUS term:t
                 {: RESULT = new OpExp(sleft, s, OpExp.PLUS, t); :}
               | add_exp:s MINUS term:t
                 {: RESULT = new OpExp(sleft, s, OpExp.MINUS, t); :}
               | term:t
                 {: RESULT = t; :}
               ;

term         ::= term:t TIMES signed_factor:f
                  {: RESULT = new OpExp(tleft, t, OpExp.TIMES, f); :}
                | term:t OVER signed_factor:f
                  {: RESULT = new OpExp(tleft, t, OpExp.OVER, f); :}
                | signed_factor:f
                  {: RESULT = f; :}
               ;

signed_factor ::= MINUS:m signed_factor:f
                  {: RESULT = new OpExp(mleft, new NilExp(0), OpExp.UMINUS, f); :}
               |  factor:f
                  {: RESULT = f; :}
               ;

factor       ::= LPAREN exp:e RPAREN
                 {: RESULT = e; :}
               | NUM:n
                 {: RESULT = new IntExp(nleft, n); :}
               | var:v
                 {: RESULT = v; :}
               | TRUTH:t
                 {: RESULT = new BoolExp(tleft, t); :}
               | call:c
                 {: RESULT = c; :}
               ;

var          ::= ID:i
                {: RESULT = SimpleVar.var(ileft, i); :}
               | ID:i1 LBRACK exp:e2 RBRACK
                {: RESULT = IndexVar.var(i1left, i1, e2); :}
             ;

call         ::= ID:i1 LPAREN args:a2 RPAREN
                {: RESULT = new CallExp(i1left, i1, a2); :}
                ;

args         ::= arg_list:a
                {: RESULT = a; :}
                ;

arg_list     ::= /*empty*/
                 {: RESULT = new ExpList(new NilExp(0), null); :}
               | arg_list:a1 COMMA exp:e2
                 {: ExpList t = a1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail =  new ExpList(e2, null);
                    RESULT = a1;
                 :}
               | exp:e
                 {: RESULT = new ExpList(e, null); :}
               | error COMMA exp:e
                 {: parser.report_error("invalid", null);
                    RESULT = new ExpList(e, null);
                 :}
               ;

type       ::= VOID:t
              {: RESULT = new NameTy(tleft, NameTy.VOID); :}
             | INT:t
              {: RESULT = new NameTy(tleft, NameTy.INT); :}
             | BOOL:t
              {: RESULT = new NameTy(tleft, NameTy.BOOL); :}
            ;